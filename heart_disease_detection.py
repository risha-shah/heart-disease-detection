# -*- coding: utf-8 -*-
"""heart disease detection

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UN6q0Q9E9SouCs-uatuA60q_KpyISjbT
"""

import numpy as np 
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

#import the data
from google.colab import files
uploaded = files.upload()

df = pd.read_csv('heart.csv')
df.tail(7)

df.shape

#Count the empty values in each column 
df.isna().sum()

#Another way to check for any null or missing values
df.isnull().values.any()

df.describe()

#Count the number of indviiduals with a heart disease and without
df['target'].value_counts()

#visualize the count (who has heart disease who doesn't)
sns.countplot(df['target'])

#Visualize the data
fig_dims = (15, 10)
fig, ax = plt.subplots(figsize=fig_dims)

sns.countplot(x='age', hue='target',data=df,palette= 'Accent',ax=ax)

#Get the correlation  of the columns
df.corr()

#Drop/remove the slope column
df = df.drop('slope', axis = 1)

#Split the data into feature data and target data
X = df.iloc[:,:-1].values #this will consist of the columns EXCEPT for the last one (that's where there is a -1)
Y = df.iloc[:,-1].values

#Split the data, into 75% training data and 10% testing data
from sklearn.model_selection import train_test_split

X_train, X_test, Y_train, Y_test=train_test_split(X,Y, test_size = 0.1, random_state=1)

#Feature scale the data 
#Scale the values in the data to be values between 0 and 1 inclusive 
from sklearn.preprocessing import StandardScaler

sc = StandardScaler()

#transform x-train data set
X_train= sc.fit_transform(X_train)
X_test = sc.transform(X_test)

#USE MACHINE LEARN MODEL
#use random forest classifier

from sklearn.ensemble import RandomForestClassifier
#radnom forest classifier will be out object
forest = RandomForestClassifier(n_estimators = 10, criterion = 'entropy', random_state=1)
forest.fit(X_train, Y_train)

#Test the models accuracy on the training
model = forest
model.score(X_train, Y_train)

#Test the models accuracy on the testing data 
#USING THE BELOW ONE INSREAD BC HIGHER ACCURACY
from sklearn.metrics import confusion_matrix

cm = confusion_matrix(Y_test,model.predict(X_test))

TN = cm[0][0] 
TP = cm[1][1] 
FN = cm[1][0]
FP = cm[0][1]

#Print the confusion matrix print(cm)

#Print model's accuracy on test data 
print ('Model Test Accuracy = {}'.format((TP+TN)/(TP+TN+FN+FP)))

from sklearn.ensemble import RandomForestClassifier
rf = RandomForestClassifier(n_estimators = 1000, random_state = 1)
rf.fit(X_train, Y_train)

acc = rf.score(X_test,Y_test)*100
print (acc)
print("Random Forest Algorithm Accuracy Score : {:.2f}%".format(acc))